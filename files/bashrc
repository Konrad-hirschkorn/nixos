#!/bin/bash
iatest=$(expr index "$-" i)

#######################################################
# Custom Edits
#######################################################

# User aliases
alias htop='btop'
alias gitree='git ls-files --cached --others --exclude-standard | tree --fromfile'
alias gittree='git ls-files --cached --others --exclude-standard | tree --fromfile'
alias term='ghostty'
alias terminal='ghostty'
alias logout='loginctl terminate-user $USER'
alias nixos='cd ~/Coding/Other/nixos'
alias iocto='cd ~/Coding/iocto'
alias install_tim_server='nix run nixpkgs#nixos-anywhere -- --flake /etc/nixos#tim-server root@142.132.234.128'
alias nix_clean='sudo nix-collect-garbage -d && sudo nix-store --gc && sudo nix-store --optimize && sudo nix-store --verify --check-contents'
alias git_amend='git add . && git commit --amend --no-edit && git push --force-with-lease'
alias wake_tim-pc='wol 40:B0:76:DC:79:AA'

if [ "${WSL:-0}" = "1" ]; then
	# WSL=1, set aliases for WSL environment
	alias rebuild='sudo cp -a ~/Coding/Other/nixos/* /etc/nixos/ && clear && sudo nixos-rebuild switch --flake /etc/nixos#tim-wsl && bash'
	alias code='wslcode'
else
	# WSL is unset or not 1, set aliases for non-WSL environment
	alias rebuild='sudo cp -a ~/Coding/Other/nixos/* /etc/nixos/ && clear && sudo nixos-rebuild switch && bash'
fi

#######################################################
# SOURCED ALIAS'S AND SCRIPTS BY zachbrowne.me
#######################################################
# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Enable bash programmable completion features in interactive shells
if [ -f /usr/share/bash-completion/bash_completion ]; then
	. /usr/share/bash-completion/bash_completion
elif [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
fi

#######################################################
# EXPORTS
#######################################################

# Disable the bell
if [[ $iatest -gt 0 ]]; then bind "set bell-style visible"; fi

# Expand the history size
export HISTFILESIZE=10000
export HISTSIZE=500

# Don't put duplicate lines in the history and do not add lines that start with a space
export HISTCONTROL=erasedups:ignoredups:ignorespace

# Check the window size after each command and, if necessary, update the values of LINES and COLUMNS
shopt -s checkwinsize

# Causes bash to append to history instead of overwriting it so if you start a new terminal, you have old session history
shopt -s histappend
PROMPT_COMMAND='history -a'

# Allow ctrl-S for history navigation (with ctrl-R)
[[ $- == *i* ]] && stty -ixon

# Ignore case on auto-completion
# Note: bind used instead of sticking these in .inputrc
if [[ $iatest -gt 0 ]]; then bind "set completion-ignore-case on"; fi

# Show auto-completion list automatically, without double tab
if [[ $iatest -gt 0 ]]; then bind "set show-all-if-ambiguous On"; fi

# Set the default editor
alias edit='nvim'
alias sedit='sudo nvim'
export EDITOR=nvim
export VISUAL=nvim
alias pico='edit'
alias spico='sedit'
alias nano='edit'
alias snano='sedit'
alias vim='nvim'

# Replace batcat with cat on Fedora as batcat is not available as a RPM in any form
if command -v lsb_release >/dev/null; then
	DISTRIBUTION=$(lsb_release -si)

	if [ "$DISTRIBUTION" = "Fedora" ] || [ "$DISTRIBUTION" = "Arch" ]; then
		alias cat='bat'
	else
		alias cat='batcat'
	fi
fi

# To have colors for ls and all grep commands such as grep, egrep and zgrep
export CLICOLOR=1
export LS_COLORS='no=00:fi=00:di=00;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:*.xml=00;31:'
#export GREP_OPTIONS='--color=auto' #deprecated
alias grep="/usr/bin/grep $GREP_OPTIONS"
unset GREP_OPTIONS

# Color for manpages in less makes manpages a little easier to read
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

#######################################################
# MACHINE SPECIFIC ALIAS'S
#######################################################

# Alias's for SSH
# alias SERVERNAME='ssh YOURWEBSITE.com -l USERNAME -p PORTNUMBERHERE'

# Alias's to change the directory
alias web='cd /var/www/html'

# Alias's to mount ISO files
# mount -o loop /home/NAMEOFISO.iso /home/ISOMOUNTDIR/
# umount /home/NAMEOFISO.iso
# (Both commands done as root only.)

#######################################################
# GENERAL ALIAS'S
#######################################################
# To temporarily bypass an alias, we precede the command with a \
# EG: the ls command is aliased, but to use the normal ls command you would type \ls

# alias to show the date
alias da='date "+%Y-%m-%d %A %T %Z"'

# Alias's to modified commands
alias cp='cp -i'
alias mv='mv -i'
alias rm='trash -v'
alias mkdir='mkdir -p'
alias ps='ps auxf'
alias ping='ping -c 10'
alias less='less -R'
alias cls='clear'
alias apt-get='sudo apt-get'
alias multitail='multitail --no-repeat -c'
alias freshclam='sudo freshclam'
alias vi='nvim'
alias svi='sudo vi'
alias vis='nvim "+set si"'

# Change directory aliases
alias home='cd ~'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Search command line history
alias h="history | grep "

# Search running processes
alias p="ps aux | grep "
alias topcpu="/bin/ps -eo pcpu,pid,user,args | sort -k 1 -r | head -10"

# Search files in the current folder
alias f="find . | grep "

# Count all files (recursively) in the current folder
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"

# To see if a command is aliased, a file, or a built-in command
alias checkcommand="type -t"

# Show open ports
alias openports='netstat -nape --inet'

# Alias's for safe and forced reboots
alias rebootsafe='sudo shutdown -r now'
alias rebootforce='sudo shutdown -r -n now'

# Alias's to show disk space and space used in a folder
alias diskspace="du -S | sort -n -r |more"
alias folders='du -h --max-depth=1'
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'
alias mountedinfo='df -hT'

# Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'

# Show all logs in /var/log
alias logs="sudo find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"

# SHA1
alias sha1='openssl sha1'

alias clickpaste='sleep 3; xdotool type "$(xclip -o -selection clipboard)"'

# KITTY - alias to be able to use kitty features when connecting to remote servers(e.g use tmux on remote server)

alias kssh="kitty +kitten ssh"

#######################################################
# SPECIAL FUNCTIONS
#######################################################
# Extracts any archive(s) (if unp isn't installed)
extract() {
	for archive in "$@"; do
		if [ -f "$archive" ]; then
			case $archive in
			*.tar.bz2) tar xvjf $archive ;;
			*.tar.gz) tar xvzf $archive ;;
			*.bz2) bunzip2 $archive ;;
			*.rar) rar x $archive ;;
			*.gz) gunzip $archive ;;
			*.tar) tar xvf $archive ;;
			*.tbz2) tar xvjf $archive ;;
			*.tgz) tar xvzf $archive ;;
			*.zip) unzip $archive ;;
			*.Z) uncompress $archive ;;
			*.7z) 7z x $archive ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Copy file with a progress bar
cpp() {
	set -e
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 |
		awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size="$(stat -c '%s' "${1}")" count=0
}

# Copy and go to the directory
cpg() {
	if [ -d "$2" ]; then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}

# Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}

# Create and go to the directory
mkdirg() {
	mkdir -p "$1"
	cd "$1"
}

# Goes up a specified number of directories  (i.e. up 4)
up() {
	local d=""
	limit=$1
	for ((i = 1; i <= limit; i++)); do
		d=$d/..
	done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}

# Automatically do an ls after each cd, z, or zoxide
cd() {
	if [ -n "$1" ]; then
		builtin cd "$@" && ls
	else
		builtin cd ~ && ls
	fi
}

# Returns the last 2 fields of the working directory
pwdtail() {
	pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

# Show the current distribution
distribution() {
	local dtype="unknown" # Default to unknown

	# Use /etc/os-release for modern distro identification
	if [ -r /etc/os-release ]; then
		source /etc/os-release
		case $ID in
		fedora | rhel | centos)
			dtype="redhat"
			;;
		sles | opensuse*)
			dtype="suse"
			;;
		ubuntu | debian)
			dtype="debian"
			;;
		gentoo)
			dtype="gentoo"
			;;
		arch)
			dtype="arch"
			;;
		slackware)
			dtype="slackware"
			;;
		*)
			# If ID is not recognized, keep dtype as unknown
			;;
		esac
	fi

	echo $dtype
}

# Show the current version of the operating system
ver() {
	local dtype
	dtype=$(distribution)

	case $dtype in
	"redhat")
		if [ -s /etc/redhat-release ]; then
			cat /etc/redhat-release
		else
			cat /etc/issue
		fi
		uname -a
		;;
	"suse")
		cat /etc/SuSE-release
		;;
	"debian")
		lsb_release -a
		;;
	"gentoo")
		cat /etc/gentoo-release
		;;
	"arch")
		cat /etc/os-release
		;;
	"slackware")
		cat /etc/slackware-version
		;;
	*)
		if [ -s /etc/issue ]; then
			cat /etc/issue
		else
			echo "Error: Unknown distribution"
			exit 1
		fi
		;;
	esac
}

# Automatically install the needed support files for this .bashrc file
install_bashrc_support() {
	local dtype
	dtype=$(distribution)

	case $dtype in
	"redhat")
		sudo yum install multitail tree zoxide trash-cli fzf bash-completion fastfetch
		;;
	"suse")
		sudo zypper install multitail tree zoxide trash-cli fzf bash-completion fastfetch
		;;
	"debian")
		sudo apt-get install multitail tree zoxide trash-cli fzf bash-completion
		# Fetch the latest fastfetch release URL for linux-amd64 deb file
		FASTFETCH_URL=$(curl -s https://api.github.com/repos/fastfetch-cli/fastfetch/releases/latest | grep "browser_download_url.*linux-amd64.deb" | cut -d '"' -f 4)

		# Download the latest fastfetch deb file
		curl -sL $FASTFETCH_URL -o /tmp/fastfetch_latest_amd64.deb

		# Install the downloaded deb file using apt-get
		sudo apt-get install /tmp/fastfetch_latest_amd64.deb
		;;
	"arch")
		sudo paru multitail tree zoxide trash-cli fzf bash-completion fastfetch
		;;
	"slackware")
		echo "No install support for Slackware"
		;;
	*)
		echo "Unknown distribution"
		;;
	esac
}

# Trim leading and trailing spaces (for scripts)
trim() {
	local var=$*
	var="${var#"${var%%[![:space:]]*}"}" # remove leading whitespace characters
	var="${var%"${var##*[![:space:]]}"}" # remove trailing whitespace characters
	echo -n "$var"
}
# GitHub Additions

gcom() {
	git add .
	git commit -m "$1"
}
gacp() {
	git add .
	git commit -m "$1"
	git push
}

git() {
	if [[ "$1" == "clone" && "$2" == git@github.com:iocto-gmbh/remote-support-tool.git ]]; then
		command git clone --recurse-submodules --remote-submodules "$2"
	elif [[ "$1" == "pull" ]]; then
		command git pull --recurse-submodules && command git submodule update --remote --merge
	else
		command git "$@"
	fi
}

alias gclean='git clean -fdn'

# --- wslcode: open Windows-side VS Code directly in a WSL window ----------
wslcode() {

	if [ "${WSL:-0}" = "0" ]; then
		echo "This function is only available from within a wsl environment"
		return 1
	fi

	local win_user distro vscode args abs uri

	win_user=$(wslvar USERNAME | tr -d '\r')
	vscode="/mnt/c/Users/${win_user}/AppData/Local/Programs/Microsoft VS Code/Code.exe"
	if [[ ! -x "$vscode" ]]; then
		echo "wslcode: VS Code not found at $vscode" >&2
		return 1
	fi

	distro="${WSL_DISTRO_NAME:-$(wslvar WSL_DISTRO_NAME | tr -d '\r')}"

	if [[ $# -eq 0 ]]; then
		set -- .
	fi

	args=()
	for p in "$@"; do
		abs="$(realpath "$p")"
		uri="vscode-remote://wsl+${distro}${abs}"
		if [[ -d "$abs" ]]; then
			args+=(--folder-uri "$uri")
		else
			args+=(--file-uri "$uri")
		fi
	done

	# Start VS Code detached and redirect output to /dev/null
	(
		nohup "$vscode" "${args[@]}" >/dev/null 2>&1 &
		disown
	) >/dev/null 2>&1

	# Return control immediately
	return 0
}
# -------------------------------------------------------------------------

# --- nixos_generate_iso_image: generate a iso image for NixOS --------
alias nixos_generate_iso_image='nixos_generate_iso_image'
alias iso_image_create='nixos_generate_iso_image'
alias create_iso_image='nixos_generate_iso_image'
nixos_generate_iso_image() {
	local HOST="$1"
	if [ -z "$HOST" ]; then
		echo "Usage: nixos_generate_iso_image <host>"
		return 1
	fi

	local OUT="nixos_iso_image_${HOST}_$(date +%Y%m%d_%H%M%S)"
	local TMPDIR="/tmp/$OUT"
	local DESTDIR=~/Coding/Other/nixos-images/

	# Ensure destination directory exists
	mkdir -p "$DESTDIR"

	if nix run --impure github:nix-community/nixos-generators -- \
		--format iso \
		--flake /etc/nixos#"${HOST}" \
		-o "$TMPDIR"; then

		# Copy the generated files to destination
		cp "$TMPDIR"/iso/*.iso "$DESTDIR/$OUT.iso"
		echo "ISO image successfully stored at: $DESTDIR"
		# Show the generated files
		find "$DESTDIR" -name "*${OUT}*" -type f -print
	else
		echo "Failed to generate ISO image for host: $HOST"
		return 1
	fi
}
# -------------------------------------------------------------------------

# --- nixos_generate_img_image: generate an SD image for NixOS ----------
alias nixos_generate_img_image='nixos_generate_img_image'
alias img_image_create='nixos_generate_img_image'
alias create_img_image='nixos_generate_img_image'
nixos_generate_img_image() {
	local HOST="$1"
	if [ -z "$HOST" ]; then
		echo "Usage: nixos_generate_img_image <host>"
		return 1
	fi

	local OUT="nixos_img_image_${HOST}_$(date +%Y%m%d_%H%M%S)"
	local TMPDIR="/tmp/$OUT"
	local DESTDIR=~/Coding/Other/nixos-images/

	mkdir -p "$DESTDIR"

	if nix run --impure github:nix-community/nixos-generators -- \
		--format sd-aarch64 \
		--flake /etc/nixos#"${HOST}" \
		-o "$TMPDIR"; then

		cp "$TMPDIR"/sd-aarch64/*.img "$DESTDIR/$OUT.img"
		echo "IMG image successfully stored at: $DESTDIR"
		find "$DESTDIR" -name "*${OUT}*" -type f -print
	else
		echo "Failed to generate IMG image for host: $HOST"
		return 1
	fi
}
# -----------------------------------------------------------------------

# --- print_drives: print all block devices, rclone mounts, and network drives ---
alias drives_print='print_drives'
print_drives() {
	echo "--- Block Devices (NVMe, HDD, SSD, USB, SD Cards) ---"
	lsblk -o NAME,SIZE,TYPE,MODEL,TRAN,VENDOR | grep -v "TYPE"
	echo ""
	echo "--- QEMU/KVM Virtual Disks ---"
	ls -l /dev/disk/by-id/virtio-* 2>/dev/null || echo "No QEMU/KVM disks found."
	echo ""
	echo "--- rclone Mounts (FUSE) ---"
	df -hT | grep 'fuse.rclone' || echo "No rclone mounts found."
	echo ""
	echo "--- Network Drives (NFS, CIFS) ---"
	df -hT | grep -E 'nfs|cifs' || echo "No NFS or CIFS network drives found."
	echo ""
	echo "--------------------------------------------------------"
}
# -----------------------------------------------------------------------

# --- explorer: open Windows File Explorer from inside WSL -------------------
explorer() {

	if [ "${WSL:-0}" = "0" ]; then
		echo "This function is only available from within a WSL environment" >&2
		return 1
	fi

	local win_explorer="/mnt/c/Windows/explorer.exe"
	if [[ ! -x "$win_explorer" ]]; then
		echo "explorer: Windows Explorer not found at $win_explorer" >&2
		return 1
	fi

	local distro="${WSL_DISTRO_NAME:-$(wslvar WSL_DISTRO_NAME | tr -d '\r')}"

	# If no argument is provided, use $HOME (user's home directory)
	if [[ $# -eq 0 ]]; then
		set -- "$HOME"
	fi

	local args=() abs win_path

	for p in "$@"; do
		abs="$(realpath "$p")"

		if [[ ! -e "$abs" ]]; then
			echo "explorer: $p – no such file or directory" >&2
			continue
		fi

		if [[ "$abs" == /mnt/?/* ]]; then
			local drive="${abs:5:1}"
			win_path="${drive^^}:${abs:6}"
			win_path="${win_path//\//\\}"
		else
			local sub="${abs#/}"
			sub="${sub//\//\\}"
			win_path="\\\\wsl.localhost\\${distro}\\${sub}"
		fi

		if [[ -f "$abs" ]]; then
			args+=("/select,${win_path}")
		else
			args+=("${win_path}")
		fi
	done

	(
		nohup "$win_explorer" "${args[@]}" >/dev/null 2>&1 &
		disown
	) >/dev/null 2>&1
	return 0
}
# ---------------------------------------------------------------------------

# --- transfer_keys: transfer SSH and SOPS keys to a remote host ------
# Copy SSH + SOPS keys to a remote host and fix ownership/permissions.
# Usage:  transfer_keys <hostname>
transfer_keys() {
	set -euo pipefail

	trap 'ret=$?; echo "transfer_keys failed at line $LINENO with exit code $ret" >&2; if [ -t 1 ]; then read -n 1 -s -r -p "Press any key to continue..."; fi; exit $ret' ERR

	# --- Argument check --------------------------------------------------------
	if [[ $# -lt 1 || -z $1 ]]; then
		echo "Usage: transfer_keys <hostname>" >&2
		return 1
	fi
	local HOSTNAME=$1
	local USER=$(printenv USER)

	# --- Paths -----------------------------------------------------------------
	local SOURCE_DIR="$HOME/.ssh/"
	local DEST_DIR="/home/${USER}/.ssh/"
	local KEY_FILE="id_ed25519"
	local SOURCE_KEY_PATH="${SOURCE_DIR}${KEY_FILE}"
	local DEST_KEY_PATH="/etc/ssh/nixos_personal_sops_key"
	local AGE_KEYS_FILE="$HOME/.ssh/age_keys.txt"
	local DEST_AGE_KEYS_DIR="/home/${USER}/.config/sops/age/"
	local DEST_AGE_KEYS_PATH="${DEST_AGE_KEYS_DIR}keys.txt"

	# --- Preconditions ---------------------------------------------------------
	if [[ ! -f $AGE_KEYS_FILE ]]; then
		echo "Error: $AGE_KEYS_FILE does not exist." >&2
		return 1
	fi

	# --- Remote setup ----------------------------------------------------------
	echo "Creating directory $DEST_AGE_KEYS_DIR on $HOSTNAME"
	ssh -t "${USER}@${HOSTNAME}" "mkdir -p '$DEST_AGE_KEYS_DIR'"

	# --- File transfers --------------------------------------------------------
	echo "Transferring all files from $SOURCE_DIR to $HOSTNAME:$DEST_DIR (excluding authorized_keys)"
	rsync -av --exclude 'authorized_keys' "$SOURCE_DIR" "${USER}@${HOSTNAME}":"$DEST_DIR"

	echo "Transferring $KEY_FILE to $HOSTNAME:$DEST_KEY_PATH"
	local TEMP_KEY_PATH="/tmp/$(basename "$SOURCE_KEY_PATH")"
	scp "$SOURCE_KEY_PATH" "${USER}@${HOSTNAME}":"$TEMP_KEY_PATH"
	ssh -t "${USER}@${HOSTNAME}" "sudo mv '$TEMP_KEY_PATH' '$DEST_KEY_PATH'"

	echo "Transferring $AGE_KEYS_FILE to $HOSTNAME:$DEST_AGE_KEYS_PATH"
	scp "$AGE_KEYS_FILE" "${USER}@${HOSTNAME}":"$DEST_AGE_KEYS_PATH"

	# --- Fix ownership & permissions ------------------------------------------
	echo "Setting permissions and ownership on $HOSTNAME"
	local TMP_SCRIPT=$(mktemp /tmp/transfer_keys_remote.XXXXXX.sh)
	cat >"$TMP_SCRIPT" <<EOS
chown ${USER}:users  /home/${USER}/.ssh
find /home/${USER}/.ssh -mindepth 1 ! -name authorized_keys -exec chown ${USER}:users  {} +
if [ -f /home/${USER}/.ssh/authorized_keys ]; then
    chown ${USER}:users  /home/${USER}/.ssh/authorized_keys
    chmod 600 /home/${USER}/.ssh/authorized_keys
fi
chown -R ${USER}:users /home/${USER}/.gnupg
chown -R ${USER}:users /home/${USER}/.config/sops
chmod 700 /home/${USER}/.ssh
find /home/${USER}/.ssh -type f ! -name authorized_keys -exec chmod 600 {} \;
find /home/${USER}/.ssh -type d -exec chmod 700 {} \;
chmod 600 /etc/ssh/nixos_personal_sops_key
chmod 700 /home/${USER}/.config/sops/age
chmod 600 /home/${USER}/.config/sops/age/keys.txt
chmod +x /home/${USER}/.ssh/transfer_keys.sh || true
EOS

	scp "$TMP_SCRIPT" "${USER}@${HOSTNAME}:/tmp/transfer_keys_remote.sh"
	ssh -t "${USER}@${HOSTNAME}" "sudo bash /tmp/transfer_keys_remote.sh && rm /tmp/transfer_keys_remote.sh"
	rm -f "$TMP_SCRIPT"

	echo "Transfer and setup completed."
	trap - ERR
	return 0
}
# ---------------------------------------------------------------------------

# --- ssh: custom SSH command to map hostnames to IP addresses -------------
ssh() {
	# capture the first argument (the “host” the user typed)
	local target="$1"
	# shift so that "${@}" will contain everything except the first argument
	shift

	case "$target" in
	tim-server | server)
		# maps to tim@142.132.234.128
		command ssh tim@142.132.234.128 "$@"
		;;
	tim-pc | pc)
		# maps to tim@10.0.0.3
		connect_tim_pc "$@"
		;;
	tim-laptop | laptop)
		# maps to tim@10.0.0.25
		command ssh tim@10.0.0.25 "$@"
		;;
	homeassistant)
		# maps to tim@10.0.02
		command ssh tim@10.0.02 "$@"
		;;
	*)
		# no special mapping: just invoke the real ssh with all original args
		command ssh "$target" "$@"
		;;
	esac
}

# --- ssh helper: wake tim-pc via WoL and SSH in when reachable ---------------
connect_tim_pc() {
	local max_attempts=5  # total Wake-on-LAN attempts
	local ping_timeout=30 # seconds to wait after each WoL
	local attempt=1

	echo "Trying to reach tim-pc (10.0.0.3)..."
	if ping -c 1 -W 1 10.0.0.3 >/dev/null 2>&1; then
		echo "tim-pc is already online."
		command ssh tim@10.0.0.3 "$@"
		return
	fi

	while ((attempt <= max_attempts)); do
		echo "Wake attempt #$attempt - sending magic packet."
		wake_tim-pc

		echo "Waiting up to ${ping_timeout}s for tim-pc to respond..."
		for ((elapsed = 0; elapsed < ping_timeout; elapsed++)); do
			if ping -c 1 -W 1 10.0.0.3 >/dev/null 2>&1; then
				echo "tim-pc is now online after ${elapsed}s."
				command ssh tim@10.0.0.3 "$@"
				return
			fi
			sleep 1
		done

		echo "No response from tim-pc yet."
		((attempt++))
	done

	echo "Failed to reach tim-pc after ${max_attempts} wake attempts."
	return 1
}
# ---------------------------------------------------------------------------

# --- transfer: enhanced scp with hostname mapping -------------------------
transfer() {
	# usage: transfer <host> <local_path> <remote_path>
	local target="$1" src="$2" dst="$3"
	if [[ -z "$target" || -z "$src" || -z "$dst" ]]; then
		echo "Usage: transfer <host> <local_path> <remote_path>"
		return 1
	fi

	# map the user-friendly host keyword to its real user@host string
	local remote
	case "$target" in
	tim-server | server) remote="tim@142.132.234.128" ;;
	tim-pc | pc) remote="tim@10.0.0.3" ;;
	tim-laptop | laptop) remote="tim@10.0.0.25" ;;
	homeassistant) remote="tim@10.0.02" ;;
	*) remote="$target" ;; # already user@host or raw host
	esac

	echo "Transferring \"$src\" → \"$remote:$dst\" ..."
	if scp -r "$src" "$remote:$dst"; then
		echo "Transfer complete."
	else
		echo "Transfer failed." >&2
		return 1
	fi
}
# --------------------------------------------------------------------------

# --- install_keys: generate and install local SSH and SOPS keys ------
# Checks for required key files, generates them from the primary SSH key
# if missing, and sets the correct ownership and permissions.
# Usage:  install_keys
install_keys() {
	set -euo pipefail

	# --- Trap for error handling ---------------------------------------------
	trap 'ret=$?; echo "install_keys failed at line $LINENO with exit code $ret" >&2; if [ -t 1 ]; then read -n 1 -s -r -p "Press any key to continue..."; fi; exit $ret' ERR

	# --- Paths and User Info ---------------------------------------------------
	local USER=$(printenv USER)
	local HOME="/home/${USER}" # Use explicit home path for clarity in sudo contexts
	local PRIMARY_KEY_PATH="${HOME}/.ssh/id_ed25519"
	local SOPS_KEY_PATH="/etc/ssh/nixos_personal_sops_key"
	local AGE_KEYS_DIR="${HOME}/.config/sops/age/"
	local AGE_KEYS_PATH="${AGE_KEYS_DIR}keys.txt"

	# --- Preconditions ---------------------------------------------------------
	echo "Checking for primary SSH key..."
	if [[ ! -f "$PRIMARY_KEY_PATH" ]]; then
		echo "Error: Primary key $PRIMARY_KEY_PATH does not exist." >&2
		echo "Please generate an ed25519 SSH key before running this script." >&2
		return 1
	fi
	echo "Primary SSH key found."

	# --- Check for existing files and set generation flag --------------------
	local MISSING_FILES=false
	if [[ ! -f "$SOPS_KEY_PATH" || ! -f "$AGE_KEYS_PATH" ]]; then
		MISSING_FILES=true
	fi

	if [[ "$MISSING_FILES" = false ]]; then
		echo "All keys and configuration files are already in place. Nothing to do."
		trap - ERR
		return 0
	fi

	# --- Key Generation --------------------------------------------------------
	echo "One or more key files are missing. Starting generation process..."

	# Generate SOPS key if missing
	if [[ ! -f "$SOPS_KEY_PATH" ]]; then
		echo "... $SOPS_KEY_PATH is missing, generating..."
		echo "This requires sudo privileges."
		sudo cp "$PRIMARY_KEY_PATH" "$SOPS_KEY_PATH"
		echo "Successfully created $SOPS_KEY_PATH."
	else
		echo "... $SOPS_KEY_PATH already exists."
	fi

	# Generate age key file if missing
	if [[ ! -f "$AGE_KEYS_PATH" ]]; then
		echo "... $AGE_KEYS_PATH is missing, generating..."
		if ! command -v ssh-to-age &>/dev/null; then
			echo "Error: ssh-to-age command not found. Please install it to proceed." >&2
			return 1
		fi
		mkdir -p "$AGE_KEYS_DIR"
		# Generate the age public key from the corresponding public SSH key
		ssh-to-age <"${PRIMARY_KEY_PATH}.pub" >"$AGE_KEYS_PATH"
		echo "Successfully created $AGE_KEYS_PATH."
	else
		echo "... $AGE_KEYS_PATH already exists."
	fi

	# --- Fix ownership & permissions ------------------------------------------
	echo "Setting permissions and ownership for local keys..."
	# Use sudo for the system-wide key
	sudo chown root:root "$SOPS_KEY_PATH"
	sudo chmod 600 "$SOPS_KEY_PATH"

	# Set permissions for user-specific keys and directories
	chown -R "${USER}:users" "${HOME}/.config/sops"
	chmod 700 "$AGE_KEYS_DIR"
	chmod 600 "$AGE_KEYS_PATH"

	# Ensure .ssh directory permissions are correct as a baseline
	chmod 700 "${HOME}/.ssh"
	chmod 600 "${HOME}/.ssh/id_ed25519"
	chmod 644 "${HOME}/.ssh/id_ed25519.pub"

	echo "Key installation and setup completed."
	trap - ERR
	return 0
}
# ---------------------------------------------------------------------------

#######################################################
# Set the ultimate amazing command prompt
#######################################################

export PATH=$PATH:"$HOME/.local/bin:$HOME/.cargo/bin:/var/lib/flatpak/exports/bin:/.local/share/flatpak/exports/bin"

# Install Starship - curl -sS https://starship.rs/install.sh | sh
eval "$(starship init bash)"
eval "$(zoxide init bash)"

[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
[[ ! -d ~/.local/share/blesh || -z "$(ls -A ~/.local/share/blesh 2>/dev/null)" ]] && { mkdir -p ~/.local/share/blesh && sudo cp -a $BLESH_PATH/* ~/.local/share/blesh; }
source ~/.local/share/blesh/ble.sh
eval "$(atuin init bash)"

# Terminal stuff

if [[ "$TERM" == "xterm-ghostty" ]]; then
	export TERM=xterm-256color
fi
